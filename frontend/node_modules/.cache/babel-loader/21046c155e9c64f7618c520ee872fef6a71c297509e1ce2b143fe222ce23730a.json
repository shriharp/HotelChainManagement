{"ast":null,"code":"var _jsxFileName = \"/Users/shriharpande/Documents/mit/sem 4/dbms/TridentHotel/frontend/src/pages/GuestRoomBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GuestRoomBooking = () => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchRooms = async () => {\n      const city = localStorage.getItem('selectedCity');\n      const checkInDate = '2025-04-14'; // Replace with actual date input\n      const checkOutDate = '2025-04-15'; // Replace with actual date input\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/available-rooms?branchName=${city}&checkInDate=${checkInDate}&checkOutDate=${checkOutDate}`);\n        const data = await response.json();\n        if (response.ok) {\n          setRooms(Array.isArray(data) ? data : []);\n        } else {\n          setError('Failed to fetch rooms.');\n        }\n      } catch (err) {\n        console.error('Error fetching available rooms:', err);\n        setError('Something went wrong. Please try again later.');\n      }\n    };\n    fetchRooms();\n  }, []);\n  const handleBooking = async roomId => {\n    const checkInDate = '2025-04-14'; // Replace with actual date input\n    const checkOutDate = '2025-04-15'; // Replace with actual date input\n\n    try {\n      const response = await fetch(`http://localhost:5000/api/book-room`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}` // Include JWT token\n        },\n        body: JSON.stringify({\n          roomId,\n          checkInDate,\n          checkOutDate\n        })\n      });\n      if (response.ok) {\n        const bookingData = await response.json();\n        localStorage.setItem('bookingId', bookingData.booking_id); // Save bookingId to localStorage\n\n        // Update booking status to 'CHECKED_IN'\n        await fetch(`http://localhost:5000/api/update-booking-status`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify({\n            bookingId: bookingData.booking_id\n          })\n        });\n        alert('Room booked successfully!');\n        window.location.href = '/guest-dashboard';\n      } else {\n        const errorData = await response.json();\n        alert(`Failed to book room: ${errorData.message}`);\n      }\n    } catch (err) {\n      console.error('Error booking room:', err);\n      alert('Something went wrong. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Rooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: rooms.length > 0 ? rooms.map(room => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [room.room_number, \" - \", room.room_type, \" - \\u20B9\", room.price_per_night, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleBooking(room.room_id),\n          children: \"Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this)]\n      }, room.room_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No rooms available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(GuestRoomBooking, \"Z23rMvTfHHI0WVFiwocacjvee/g=\");\n_c = GuestRoomBooking;\nexport default GuestRoomBooking;\nvar _c;\n$RefreshReg$(_c, \"GuestRoomBooking\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GuestRoomBooking","_s","rooms","setRooms","error","setError","fetchRooms","city","localStorage","getItem","checkInDate","checkOutDate","response","fetch","data","json","ok","Array","isArray","err","console","handleBooking","roomId","method","headers","Authorization","body","JSON","stringify","bookingData","setItem","booking_id","bookingId","alert","window","location","href","errorData","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","map","room","room_number","room_type","price_per_night","onClick","room_id","_c","$RefreshReg$"],"sources":["/Users/shriharpande/Documents/mit/sem 4/dbms/TridentHotel/frontend/src/pages/GuestRoomBooking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst GuestRoomBooking = () => {\n    const [rooms, setRooms] = useState([]);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const fetchRooms = async () => {\n            const city = localStorage.getItem('selectedCity');\n            const checkInDate = '2025-04-14'; // Replace with actual date input\n            const checkOutDate = '2025-04-15'; // Replace with actual date input\n\n            try {\n                const response = await fetch(\n                    `http://localhost:5000/api/available-rooms?branchName=${city}&checkInDate=${checkInDate}&checkOutDate=${checkOutDate}`\n                );\n                const data = await response.json();\n                if (response.ok) {\n                    setRooms(Array.isArray(data) ? data : []);\n                } else {\n                    setError('Failed to fetch rooms.');\n                }\n            } catch (err) {\n                console.error('Error fetching available rooms:', err);\n                setError('Something went wrong. Please try again later.');\n            }\n        };\n\n        fetchRooms();\n    }, []);\n\n    const handleBooking = async (roomId) => {\n        const checkInDate = '2025-04-14'; // Replace with actual date input\n        const checkOutDate = '2025-04-15'; // Replace with actual date input\n\n        try {\n            const response = await fetch(`http://localhost:5000/api/book-room`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${localStorage.getItem('token')}`, // Include JWT token\n                },\n                body: JSON.stringify({ roomId, checkInDate, checkOutDate }),\n            });\n\n            if (response.ok) {\n                const bookingData = await response.json();\n                localStorage.setItem('bookingId', bookingData.booking_id); // Save bookingId to localStorage\n\n                // Update booking status to 'CHECKED_IN'\n                await fetch(`http://localhost:5000/api/update-booking-status`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${localStorage.getItem('token')}`,\n                    },\n                    body: JSON.stringify({ bookingId: bookingData.booking_id }),\n                });\n\n                alert('Room booked successfully!');\n                window.location.href = '/guest-dashboard';\n            } else {\n                const errorData = await response.json();\n                alert(`Failed to book room: ${errorData.message}`);\n            }\n        } catch (err) {\n            console.error('Error booking room:', err);\n            alert('Something went wrong. Please try again later.');\n        }\n    };\n\n    return (\n        <div>\n            <h1>Available Rooms</h1>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            <ul>\n                {rooms.length > 0 ? (\n                    rooms.map((room) => (\n                        <li key={room.room_id}>\n                            {room.room_number} - {room.room_type} - â‚¹{room.price_per_night}\n                            <button onClick={() => handleBooking(room.room_id)}>Book</button>\n                        </li>\n                    ))\n                ) : (\n                    <p>No rooms available.</p>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default GuestRoomBooking;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACjD,MAAMC,WAAW,GAAG,YAAY,CAAC,CAAC;MAClC,MAAMC,YAAY,GAAG,YAAY,CAAC,CAAC;;MAEnC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,wDAAwDN,IAAI,gBAAgBG,WAAW,iBAAiBC,YAAY,EACxH,CAAC;QACD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACbb,QAAQ,CAACc,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC;QAC7C,CAAC,MAAM;UACHT,QAAQ,CAAC,wBAAwB,CAAC;QACtC;MACJ,CAAC,CAAC,OAAOc,GAAG,EAAE;QACVC,OAAO,CAAChB,KAAK,CAAC,iCAAiC,EAAEe,GAAG,CAAC;QACrDd,QAAQ,CAAC,+CAA+C,CAAC;MAC7D;IACJ,CAAC;IAEDC,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,aAAa,GAAG,MAAOC,MAAM,IAAK;IACpC,MAAMZ,WAAW,GAAG,YAAY,CAAC,CAAC;IAClC,MAAMC,YAAY,GAAG,YAAY,CAAC,CAAC;;IAEnC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAChEU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUjB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE;QAC9D,CAAC;QACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN,MAAM;UAAEZ,WAAW;UAAEC;QAAa,CAAC;MAC9D,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACI,EAAE,EAAE;QACb,MAAMa,WAAW,GAAG,MAAMjB,QAAQ,CAACG,IAAI,CAAC,CAAC;QACzCP,YAAY,CAACsB,OAAO,CAAC,WAAW,EAAED,WAAW,CAACE,UAAU,CAAC,CAAC,CAAC;;QAE3D;QACA,MAAMlB,KAAK,CAAC,iDAAiD,EAAE;UAC3DU,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAUjB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UAC1D,CAAC;UACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEI,SAAS,EAAEH,WAAW,CAACE;UAAW,CAAC;QAC9D,CAAC,CAAC;QAEFE,KAAK,CAAC,2BAA2B,CAAC;QAClCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,kBAAkB;MAC7C,CAAC,MAAM;QACH,MAAMC,SAAS,GAAG,MAAMzB,QAAQ,CAACG,IAAI,CAAC,CAAC;QACvCkB,KAAK,CAAC,wBAAwBI,SAAS,CAACC,OAAO,EAAE,CAAC;MACtD;IACJ,CAAC,CAAC,OAAOnB,GAAG,EAAE;MACVC,OAAO,CAAChB,KAAK,CAAC,qBAAqB,EAAEe,GAAG,CAAC;MACzCc,KAAK,CAAC,+CAA+C,CAAC;IAC1D;EACJ,CAAC;EAED,oBACIlC,OAAA;IAAAwC,QAAA,gBACIxC,OAAA;MAAAwC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBvC,KAAK,iBAAIL,OAAA;MAAG6C,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEnC;IAAK;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjD5C,OAAA;MAAAwC,QAAA,EACKrC,KAAK,CAAC4C,MAAM,GAAG,CAAC,GACb5C,KAAK,CAAC6C,GAAG,CAAEC,IAAI,iBACXjD,OAAA;QAAAwC,QAAA,GACKS,IAAI,CAACC,WAAW,EAAC,KAAG,EAACD,IAAI,CAACE,SAAS,EAAC,WAAI,EAACF,IAAI,CAACG,eAAe,eAC9DpD,OAAA;UAAQqD,OAAO,EAAEA,CAAA,KAAM/B,aAAa,CAAC2B,IAAI,CAACK,OAAO,CAAE;UAAAd,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAF5DK,IAAI,CAACK,OAAO;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGjB,CACP,CAAC,gBAEF5C,OAAA;QAAAwC,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC5B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAC1C,EAAA,CAvFID,gBAAgB;AAAAsD,EAAA,GAAhBtD,gBAAgB;AAyFtB,eAAeA,gBAAgB;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}